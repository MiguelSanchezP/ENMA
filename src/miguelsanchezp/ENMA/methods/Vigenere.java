package miguelsanchezp.ENMA.methods;

import miguelsanchezp.ENMA.resources.Utilities;

import java.util.ArrayList;

import static miguelsanchezp.ENMA.resources.Utilities.adjustKeyLength;
import static miguelsanchezp.ENMA.resources.Utilities.prepareWithTreatment;

public class Vigenere {
    private static String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    public static String cypher (String message, String key, boolean autokey, String treatment) {
        ArrayList<Character> finalmessage = prepareWithTreatment(message, treatment);
        String finalmessagestr = Utilities.toString(finalmessage);
        String fixedKey;
        if (!autokey) {
            fixedKey = adjustKeyLength (key, finalmessagestr.length());
        }else{
            fixedKey = adjustKeyLength (key, finalmessagestr.length(), finalmessagestr);
        }
        int round = 0;
        StringBuilder cyphered = new StringBuilder();
        for (char c : finalmessage) {
            StringBuilder sbM = new StringBuilder();
            StringBuilder sbK = new StringBuilder();
            sbM.append(c);
            sbK.append(fixedKey.charAt(round));
            if (alphabet.contains(sbM) && alphabet.contains(sbK)) {
                cyphered.append(alphabet.charAt((alphabet.indexOf(c)+alphabet.indexOf(fixedKey.charAt(round)))%alphabet.length()));
                round++;
            }else{
                cyphered.append(c);
            }
        }
        System.out.println("The used key was " + fixedKey);
        return cyphered.toString();
    }

    public static String decypher (String message, String key, boolean autokey) {
        ArrayList<Character> message2 = Utilities.toArray(message);
        String fixedKey;
        StringBuilder decyphered = new StringBuilder();
        if (!autokey) {
            fixedKey = adjustKeyLength(key, message.length());
            int round = 0;
            for (char c : message2) {
                StringBuilder sbM = new StringBuilder();
                sbM.append(c);
                StringBuilder sbK = new StringBuilder();
                sbK.append(fixedKey.charAt(round));
                if (alphabet.contains(sbM) && alphabet.contains(sbK)) {
                    int pos = alphabet.indexOf(c)-alphabet.indexOf(fixedKey.charAt(round));
                    if (pos < 0) {
                        pos+=alphabet.length();
                    }
                    decyphered.append(alphabet.charAt(pos));
                    round++;
                }else{
                    decyphered.append(c);
                }
            }
        }else{
            StringBuilder sbKF = new StringBuilder(); //creation of the SB for storing the autogenerated key
            sbKF.append(key.toUpperCase()); //add the key that's specified
            int round = 0; //creation of the round variable for determining the password
            for (char c : message2) { //run through all the characters in the message2 array
                StringBuilder sbM = new StringBuilder(); //creation of the SB for storing the current character in the message
                sbM.append(c); //append the character that's being analyzed
                StringBuilder sbK = new StringBuilder(); //creation of the SB for storing the key
                sbK.append(Character.toUpperCase(sbKF.charAt(round))); //append the current character of the message to the key
                if (alphabet.contains(sbM) && alphabet.contains(sbK)) { //check if the alphabet contains the key and message character
                    int pos = alphabet.indexOf(c)-alphabet.indexOf(sbKF.charAt(round)); //creation of the variable pos (difference between the two)
                    if (pos < 0) { //check if the pos is smaller than 0
                        pos += alphabet.length(); //add the length of the alphabet to the value of pos
                    }
                    decyphered.append(alphabet.charAt(pos)); //add the character that's on the position
                    sbKF.append(alphabet.charAt(pos)); //add the current decyphered char to the key
                    round++; //update the round
                }else{
                    decyphered.append(c); //add the character as it was
                }
            }
            System.out.println("The deduced key was: " + sbKF.toString());
        }
        return decyphered.toString();
    }
}